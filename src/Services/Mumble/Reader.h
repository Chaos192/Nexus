///----------------------------------------------------------------------------------------------------
/// Copyright (c) Raidcore.GG - All rights reserved.
///
/// Name         :  Reader.h
/// Description  :  Provides Mumble API events and extended data.
/// Authors      :  K. Bieniek
///----------------------------------------------------------------------------------------------------

#ifndef MUMBLE_READER_H
#define MUMBLE_READER_H

#include <thread>

#include "Services/Mumble/Definitions/Mumble.h"

///----------------------------------------------------------------------------------------------------
/// Mumble Namespace
///----------------------------------------------------------------------------------------------------
namespace Mumble
{
	extern bool IsRunning;

	extern std::thread UpdateIdentityThread;
	extern std::thread UpdateStateThread;

	///----------------------------------------------------------------------------------------------------
	/// Initialize:
	/// 	Initializes the threads parsing the MumbleLink.
	///----------------------------------------------------------------------------------------------------
	void Initialize();

	///----------------------------------------------------------------------------------------------------
	/// Shutdown:
	/// 	Stops the MumbleLink threads.
	///----------------------------------------------------------------------------------------------------
	void Shutdown();

	///----------------------------------------------------------------------------------------------------
	/// UpdateIdentityLoop:
	/// 	Loop that polls Mumble->Identity.
	///----------------------------------------------------------------------------------------------------
	void UpdateIdentityLoop();

	///----------------------------------------------------------------------------------------------------
	/// UpdateStateLoop:
	/// 	Loop that polls various derived states.
	///----------------------------------------------------------------------------------------------------
	void UpdateStateLoop();

	///----------------------------------------------------------------------------------------------------
	/// GetScalingFactor:
	/// 	Returns the scaling factor for the given the UISize enum.
	///----------------------------------------------------------------------------------------------------
	float GetScalingFactor(EUIScale aSize);
};

#endif
